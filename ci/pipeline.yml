---
resources:
  - name: bottle
    type: git
    source:
      uri: {{github-uri}}
      branch: {{github-branch}}

  #- name: version
  #  type: semver
  #  source:
  #    bucket: {{s3-bucket-version}}
  #    initial_version: 1.0.0-rc.0
  #    key: current-version
  #    access_key_id: {{s3-access-key-id}}
  #    secret_access_key: {{s3-secret-access-key}}
  #    endpoint: {{s3-endpoint}}
  - name: dockerhub
    type: docker-image
    source:
      email: {{docker-hub-email}}
      username: {{docker-hub-username}}
      password: {{docker-hub-password}}
      repository: {{docker-hub-repository}}
  
      #  - name: candidate-release
      #    type: s3
      #    source:
      #      bucket: {{s3-bucket-release-candidates}}
      #      regexp: pcf-demo-(.*).war
      #      access_key_id: {{s3-access-key-id}}
      #      secret_access_key: {{s3-secret-access-key}}
      #      endpoint: {{s3-endpoint}}
      #
      #  - name: final-release
      #    type: s3
      #    source:
      #      bucket: {{s3-bucket-releases}}
      #      regexp: pcf-demo-(.*).war
      #      access_key_id: {{s3-access-key-id}}
      #      secret_access_key: {{s3-secret-access-key}}
      #      endpoint: {{s3-endpoint}}
      #
jobs:
  - name: unit-test
    public: true
    plan:
      - get: bottle
        trigger: true
      - task: unit
        file: bottle/ci/tasks/unit.yml

  - name: build-image
    serial_groups: [ version ]
    plan:
      - get: bottle
        passed: [ unit-test ]
        trigger: true
      - put: dockerhub
        params:
          build: bottle
  - name: deploy-staging
    serial_groups: [ version ]
    plan:
      - get: bottle
        passed: [ build-image ]
        trigger: true
      - task: deploy-staging
        file: bottle/ci/tasks/deploy-staging.yml
        params:
          RANCHER_ACCESS_KEY: {{rancher-env-access-key}}
          RANCHER_SECRET_KEY: {{rancher-env-secret-key}}
          RANCHER_URL: {{rancher-env-url}}
  - name: ship-it
    serial_groups: [ version ]
    plan:
      #- get: candidate-release
      #  passed: [ integration-test ]
      - get: bottle
        passed: [ deploy-staging ]
      #- get: version
      #  params: { bump: final }
      #- task: prepare-final
      #  file: pcfdemo/ci/tasks/prepare-final.yml
      #- put: final-release
      #  params: { file: prepare-final/pcf-demo-*.war }
      #- put: version
      #  params: { file: version/number }
      #- get: version
      #  params: { pre: rc }
      #- put: candidate-release
      #  params: { file: build/pcf-demo-*.war }
      #- put: version
      #  params: { file: version/number }
  
        #  - name: integration-test
        #    serial: true
        #    plan:
        #      - get: candidate-release
        #        trigger: true
        #        passed: [ build-artifact ]
        #      - get: pcfdemo
        #        passed: [ build-artifact ]
        #      - get: version
        #        passed: [ build-artifact ]
        #      - task: prepare-integration
        #        file: pcfdemo/ci/tasks/prepare-integration.yml
        #      - task: integration
        #        file: pcfdemo/ci/tasks/integration.yml
        #        params:
        #          <<: *MAVENPARAMS
        #
        #  - name: ship-it
        #    serial_groups: [ version ]
        #    plan:
        #      - get: candidate-release
        #        passed: [ integration-test ]
        #      - get: pcfdemo
        #        passed: [ integration-test ]
        #      - get: version
        #        params: { bump: final }
        #      - task: prepare-final
        #        file: pcfdemo/ci/tasks/prepare-final.yml
        #      - put: final-release
        #        params: { file: prepare-final/pcf-demo-*.war }
        #      - put: cf
        #        params:
        #          manifest: pcfdemo/ci/manifest-final.yml
        #          path: prepare-final/pcf-demo.war
        #      - put: version
        #        params: { file: version/number }
        #
        #  - name: major
        #    serial_groups: [ version ]
        #    plan:
        #      - put: version
        #        params: { bump: major, pre: rc }
        #
        #  - name: minor
        #    serial_groups: [ version ]
        #    plan:
        #      - put: version
        #        params: { bump: minor, pre: rc }
        #
        #  - name: patch
        #    serial_groups: [ version ]
        #    plan:
        #      - get: version
        #        passed: [ ship-it ]
        #        trigger: true
        #      - put: version
        #        params: { bump: patch, pre: rc }
